@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Chat Room";
    var userId = Context.Session.GetInt32("UserId") ?? 0;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">

<style>
    html, body {
        height: 100%;
        margin: 0;
        overflow: auto;
        background: linear-gradient(135deg, #d0e8f2, #f3f9fb);
        font-family: 'Segoe UI', sans-serif;
    }

    .full-height-container {
        height: 100vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        overflow: auto;
    }

    .chat-wrapper {
        display: flex;
        height: calc(100vh - 40px);
        width: 100%;
        max-width: 1400px;
        margin: auto;
        border-radius: 20px;
        overflow: auto;
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
    }

    .user-panel {
        width: 30%;
        background: #ffffff;
        padding: 1rem;
        border-right: 1px solid #dee2e6;
        overflow-y: auto;
    }

    .chat-panel {
        flex-grow: 1;
        background: #ffffff;
        display: flex;
        flex-direction: column;
        overflow: auto;
    }

    .chat-header {
        background: linear-gradient(135deg, #56ab2f, #a8e063);
        color: white;
        font-weight: bold;
        padding: 1rem;
        display: flex;
        align-items: center;
        white-space: nowrap;
        overflow: auto;
        text-overflow: ellipsis;
    }

    .messages-scroll-area {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        background: #f5f7fa;
        display: flex;
        flex-direction: column;
    }

    .chat-form-container {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 1rem;
        background: #e9ecef;
        border-top: 1px solid #dee2e6;
    }

        .chat-form-container input {
            flex-grow: 1;
            border-radius: 20px;
            padding: 10px 15px;
            border: 1px solid #ccc;
            outline: none;
            height: 45px;
        }

        .chat-form-container button {
            border-radius: 50%;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
        }

    .chat-bubble {
        padding: 10px 15px;
        margin-bottom: 10px;
        border-radius: 20px;
        max-width: 75%;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        word-wrap: break-word;
    }

    .chat-bubble-sent {
        align-self: flex-end;
        background-color: #dcf8c6;
        text-align: right;
    }

    .chat-bubble-received {
        align-self: flex-start;
        background-color: #ffffff;
        text-align: left;
    }

    .user-item span {
        overflow: auto;
        text-overflow: ellipsis;
        white-space: nowrap;
        display: inline-block;
        max-width: 60%;
    }

    @@media (max-width: 768px) {
        .chat-wrapper

    {
        flex-direction: column;
        height: 100vh;
    }

    .user-panel {
        width: 100%;
        height: 40%;
    }

    .chat-panel {
        height: 60%;
    }

    .user-item span {
        max-width: 40vw;
    }

    }
</style>

<div class="container-fluid full-height-container">
    <div class="chat-wrapper">
        <div class="user-panel">
            <input class="form-control mb-3" type="text" id="searchUsers" placeholder="Search users..." />
            <ul class="list-group" id="usersList"></ul>
        </div>
        <div class="chat-panel">
            <div class="chat-header" id="chatWith">
                Select a user to chat
            </div>
            <div class="messages-scroll-area" id="messagesList"></div>
            <form id="messageForm" class="chat-form-container">
                <input type="text" id="messageInput" placeholder="Type a message..." autocomplete="off" />
                <button type="submit" class="btn btn-success shadow-sm"><i class="fa fa-paper-plane"></i></button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const userId = @userId;
        let selectedUserId = null;
        const usersList = document.getElementById("usersList");
        const messagesList = document.getElementById("messagesList");
        const messageForm = document.getElementById("messageForm");
        const messageInput = document.getElementById("messageInput");
        const chatWith = document.getElementById("chatWith");
        const searchUsers = document.getElementById("searchUsers");

        const connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();
        let messages = {};
        let allUsers = [];

        connection.on("UserList", function (userArray) {
            allUsers = userArray;
            renderUserList(userArray);
        });

        function renderUserList(userArray) {
            usersList.innerHTML = "";
            userArray.forEach(user => {
                const li = document.createElement("li");
                li.className = "list-group-item d-flex align-items-center user-item border-0 shadow-sm mb-2 rounded";
                li.dataset.userid = user.id;

                const avatar = `<img src="${user.avatarUrl}" class="rounded-circle me-2" width="40" height="40" onerror="this.src='/images/default-avatar.png'" />`;
                const statusDot = `<span class="ms-auto rounded-circle" style="width:10px;height:10px;background-color:${user.isOnline ? 'green' : 'gray'}"></span>`;

                li.innerHTML = `${avatar} <span>${user.username}</span> ${statusDot}`;
                li.addEventListener("click", () => selectUser(user.id, user.username));
                usersList.appendChild(li);
            });
        }

        connection.on("ReceiveMessage", function (fromId, message, timestamp) {
            if (!messages[fromId]) messages[fromId] = [];
            messages[fromId].push({ fromUserId: fromId, message, timestamp });
            if (selectedUserId === fromId) loadMessages();
        });

        connection.on("LoadMessages", function (withUserId, msgs) {
            messages[withUserId] = msgs;
            if (selectedUserId === withUserId) loadMessages();
        });

        connection.start().then(() => console.log("Connected to SignalR")).catch(err => console.error(err.toString()));

        function selectUser(id, name) {
            selectedUserId = id;
            chatWith.textContent = `Chat with ${name}`;
            messageForm.style.display = "flex";
            [...usersList.children].forEach(li => li.classList.toggle("bg-success-subtle", li.dataset.userid == id));
            connection.invoke("LoadMessages", selectedUserId).catch(console.error);
        }

        function loadMessages() {
            messagesList.innerHTML = "";
            (messages[selectedUserId] || []).forEach(m => {
                const div = document.createElement("div");
                div.className = `chat-bubble ${m.fromUserId === userId ? 'chat-bubble-sent' : 'chat-bubble-received'}`;
                div.innerHTML = `<div>${m.message}</div><div class='small text-muted mt-1'>${m.timestamp}</div>`;
                messagesList.appendChild(div);
            });
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        messageForm.addEventListener("submit", function (e) {
            e.preventDefault();
            const text = messageInput.value.trim();
            if (!text || !selectedUserId) return;

            const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            connection.invoke("SendMessage", selectedUserId, text).catch(console.error);

            if (!messages[selectedUserId]) messages[selectedUserId] = [];
            messages[selectedUserId].push({ fromUserId: userId, message: text, timestamp });
            loadMessages();
            messageInput.value = "";
        });

        searchUsers.addEventListener("input", () => {
            const query = searchUsers.value.toLowerCase();
            const filtered = allUsers.filter(u => u.username.toLowerCase().includes(query));
            renderUserList(filtered);
        });
    </script>
}